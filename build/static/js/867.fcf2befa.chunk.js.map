{"version":3,"file":"static/js/867.fcf2befa.chunk.js","mappings":"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","sources":["components/ResetPassword.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Password Reset for External Users\r\nconst ResetPassword: React.FC = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [token, setToken] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirm, setConfirm] = useState('');\r\n  const [step, setStep] = useState<'request'|'reset'|'done'>('request');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Parse email/token from URL if present\r\n  React.useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    if (params.get('email')) setEmail(params.get('email')!);\r\n    if (params.get('token')) {\r\n      setToken(params.get('token')!);\r\n      setStep('reset');\r\n    }\r\n  }, []);\r\n\r\n  const handleRequest = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch('/api/external-users/request-reset', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email })\r\n      });\r\n      const j = await res.json();\r\n      if (!res.ok) throw new Error(j.error || 'Failed to send reset email');\r\n      setStep('reset');\r\n    } catch (e: any) {\r\n      setError(e.message || 'Failed to send reset email');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    if (password !== confirm) {\r\n      setError('Passwords do not match');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch('/api/external-users/reset-password', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, token, password })\r\n      });\r\n      const j = await res.json();\r\n      if (!res.ok) throw new Error(j.error || 'Failed to reset password');\r\n      setStep('done');\r\n    } catch (e: any) {\r\n      setError(e.message || 'Failed to reset password');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (step === 'done') {\r\n    return (\r\n      <div className=\"container\" style={{ maxWidth: 400, margin: '0 auto', padding: 32 }}>\r\n        <h2>Password Reset</h2>\r\n        <div>Your password has been reset. You may now log in.</div>\r\n        <a href=\"/login\"><button className=\"btn\" style={{ marginTop: 16 }}>Go to Login</button></a>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" style={{ maxWidth: 400, margin: '0 auto', padding: 32 }}>\r\n      <h2>{step === 'request' ? 'Reset Password' : 'Set New Password'}</h2>\r\n      {step === 'request' ? (\r\n        <form onSubmit={handleRequest}>\r\n          <div style={{ marginBottom: 16 }}>\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Email address\"\r\n              value={email}\r\n              onChange={e => setEmail(e.target.value)}\r\n              required\r\n              style={{ width: '100%', padding: 8 }}\r\n              autoFocus\r\n            />\r\n          </div>\r\n          {error && <div style={{ color: 'red', marginBottom: 12 }}>{error}</div>}\r\n          <button className=\"btn\" type=\"submit\" disabled={loading} style={{ width: '100%' }}>\r\n            {loading ? 'Sending...' : 'Send Reset Email'}\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <form onSubmit={handleReset}>\r\n          <input type=\"hidden\" value={email} />\r\n          <input type=\"hidden\" value={token} />\r\n          <div style={{ marginBottom: 16 }}>\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"New password\"\r\n              value={password}\r\n              onChange={e => setPassword(e.target.value)}\r\n              required\r\n              minLength={8}\r\n              style={{ width: '100%', padding: 8 }}\r\n            />\r\n          </div>\r\n          <div style={{ marginBottom: 16 }}>\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Confirm password\"\r\n              value={confirm}\r\n              onChange={e => setConfirm(e.target.value)}\r\n              required\r\n              minLength={8}\r\n              style={{ width: '100%', padding: 8 }}\r\n            />\r\n          </div>\r\n          {error && <div style={{ color: 'red', marginBottom: 12 }}>{error}</div>}\r\n          <button className=\"btn\" type=\"submit\" disabled={loading} style={{ width: '100%' }}>\r\n            {loading ? 'Resetting...' : 'Reset Password'}\r\n          </button>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"names":["ResetPassword","email","setEmail","useState","token","setToken","password","setPassword","confirm","setConfirm","step","setStep","error","setError","loading","setLoading","React","params","URLSearchParams","window","location","search","get","_jsxs","className","style","maxWidth","margin","padding","children","_jsx","href","marginTop","onSubmit","async","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","j","json","ok","Error","message","marginBottom","type","placeholder","value","onChange","target","required","width","autoFocus","color","disabled","minLength"],"sourceRoot":""}