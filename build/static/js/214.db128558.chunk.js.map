{"version":3,"file":"static/js/214.db128558.chunk.js","mappings":"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","sources":["../node_modules/@microsoft/mgt-element/dist/es6/src/IGraph.ts","../node_modules/@microsoft/mgt-element/dist/es6/providers/src/providers/IProvider.ts","../node_modules/@microsoft/mgt-element/dist/es6/providers/src/providers/Providers.ts","../node_modules/@microsoft/mgt-element/dist/es6/utils/src/utils/EventDispatcher.ts","../node_modules/@microsoft/mgt-element/dist/es6/utils/src/utils/validateBaseURL.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Client, GraphRequest } from '@microsoft/microsoft-graph-client';\nimport { IBatch } from './IBatch';\n\n/**\n * The common functions of the Graph\n *\n * @export\n * @interface IGraph\n */\nexport interface IGraph {\n  /**\n   * the internal client used to make graph calls\n   *\n   * @type {Client}\n   * @memberof IGraph\n   */\n  readonly client: Client;\n\n  /**\n   * the component name appended to Graph request headers\n   *\n   * @type {string}\n   * @memberof IGraph\n   */\n  readonly componentName: string;\n\n  /**\n   * the version of the graph to query\n   *\n   * @type {string}\n   * @memberof IGraph\n   */\n  readonly version: string;\n\n  /**\n   * returns a new instance of the Graph using the same\n   * client within the context of the provider.\n   *\n   * @param {Element} component\n   * @returns {IGraph}\n   * @memberof IGraph\n   */\n  forComponent(component: Element): IGraph;\n\n  /**\n   * use this method to make calls directly to the Graph.\n   *\n   * @param {string} path\n   * @returns {GraphRequest}\n   * @memberof IGraph\n   */\n  api(path: string): GraphRequest;\n\n  /**\n   * creates a new batch request\n   *\n   * @returns {Batch}\n   * @memberof IGraph\n   */\n  createBatch<T = any>(): IBatch<T>;\n}\n\n/**\n * GraphEndpoint is a valid URL that is used to access the Graph.\n */\nexport type GraphEndpoint =\n  | 'https://graph.microsoft.com'\n  | 'https://graph.microsoft.us'\n  | 'https://dod-graph.microsoft.us'\n  | 'https://graph.microsoft.de'\n  | 'https://microsoftgraph.chinacloudapi.cn'\n  | 'https://canary.graph.microsoft.com';\n\n/**\n * MICROSOFT_GRAPH_DEFAULT_ENDPOINT is the default Graph endpoint that is silently set on\n * the providers as the baseURL.\n */\nexport const MICROSOFT_GRAPH_DEFAULT_ENDPOINT: GraphEndpoint = 'https://graph.microsoft.com';\n\n/**\n * MICROSOFT_GRAPH_ENDPOINTS is a set of all the valid Graph URL endpoints.\n */\nexport const MICROSOFT_GRAPH_ENDPOINTS: Set<GraphEndpoint> = new Set<GraphEndpoint>([\n  MICROSOFT_GRAPH_DEFAULT_ENDPOINT,\n  'https://graph.microsoft.us',\n  'https://dod-graph.microsoft.us',\n  'https://graph.microsoft.de',\n  'https://microsoftgraph.chinacloudapi.cn',\n  'https://canary.graph.microsoft.com'\n]);\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProvider, AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client';\nimport { validateBaseURL } from '../utils/validateBaseURL';\nimport { GraphEndpoint, IGraph, MICROSOFT_GRAPH_DEFAULT_ENDPOINT } from '../IGraph';\nimport { EventDispatcher, EventHandler } from '../utils/EventDispatcher';\n\n/**\n * Provider Type to be extended for implementing new providers\n *\n * @export\n * @abstract\n * @class IProvider\n * @implements {AuthenticationProvider}\n */\nexport abstract class IProvider implements AuthenticationProvider {\n  /**\n   * The Graph object that contains the Graph client sdk\n   *\n   * @type {Graph}\n   * @memberof IProvider\n   */\n  public graph: IGraph;\n\n  /**\n   * Specifies if the provider has enabled support for multiple accounts\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  protected isMultipleAccountDisabled = true;\n\n  /**\n   * Specifies if Multi account functionality is supported by the provider and enabled.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  public get isMultiAccountSupportedAndEnabled(): boolean {\n    return false;\n  }\n\n  private _state: ProviderState;\n  private readonly _loginChangedDispatcher = new EventDispatcher<LoginChangedEvent>();\n  private readonly _activeAccountChangedDispatcher = new EventDispatcher<ActiveAccountChanged>();\n  private _baseURL: GraphEndpoint = MICROSOFT_GRAPH_DEFAULT_ENDPOINT;\n\n  private _approvedScopes: string[] = [];\n  public get approvedScopes(): string[] {\n    return this._approvedScopes;\n  }\n\n  public set approvedScopes(value: string[]) {\n    this._approvedScopes = value.map(v => v.toLowerCase());\n  }\n\n  public hasAtLeastOneApprovedScope(requiredScopeSet: string[]): boolean {\n    return requiredScopeSet.some(s => this.approvedScopes.includes(s.toLowerCase().trim()));\n  }\n\n  public hasAllOneApprovedScope(requiredScopeSet: string[]): boolean {\n    return requiredScopeSet.some(s => !this.approvedScopes.includes(s.toLowerCase().trim()));\n  }\n\n  /**\n   * Examines the currently consented scopes for any match in the requiredScopeSet to determine what, if any, scopes need to be consented to\n   *\n   * @param {string[]} requiredScopeSet an array of scopes to be checked\n   * @returns {string[]} if any matches in requiredScopeSet exist then an empty array is returns, otherwise an array containing the first element in the requiredScopeSet is returned\n   */\n  public needsAdditionalScopes(requiredScopeSet: string[]): string[] {\n    const reqScopes: string[] = [];\n    if (requiredScopeSet.length && !this.hasAtLeastOneApprovedScope(requiredScopeSet)) {\n      reqScopes.push(requiredScopeSet[0].trim());\n    }\n    return reqScopes;\n  }\n\n  /**\n   * The base URL to be used in the graph client config.\n   */\n  public set baseURL(url: GraphEndpoint) {\n    if (validateBaseURL(url)) {\n      this._baseURL = url;\n      return;\n    } else {\n      throw new Error(`${url} is not a valid Graph URL endpoint.`);\n    }\n  }\n\n  public get baseURL(): GraphEndpoint {\n    return this._baseURL;\n  }\n\n  private _customHosts?: string[] = undefined;\n\n  /**\n   * Custom Hostnames to allow graph client to utilize\n   */\n  public set customHosts(hosts: string[] | undefined) {\n    this._customHosts = hosts;\n  }\n\n  public get customHosts(): string[] | undefined {\n    return this._customHosts;\n  }\n\n  /**\n   * Enable/Disable incremental consent\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  private _isIncrementalConsentDisabled = false;\n\n  /**\n   * Backing field for isMultiAccountSupported\n   *\n   * @protected\n   * @memberof IProvider\n   */\n  protected isMultipleAccountSupported = false;\n\n  /**\n   * Does the provider support multiple accounts?\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  public get isMultiAccountSupported(): boolean {\n    return this.isMultipleAccountSupported;\n  }\n  /**\n   * returns state of Provider\n   *\n   * @readonly\n   * @type {ProviderState}\n   * @memberof IProvider\n   */\n  public get state(): ProviderState {\n    return this._state;\n  }\n\n  /**\n   * Incremental consent setting\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get isIncrementalConsentDisabled(): boolean {\n    return this._isIncrementalConsentDisabled;\n  }\n\n  /**\n   * Enable/Disable incremental consent\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public set isIncrementalConsentDisabled(disabled: boolean) {\n    this._isIncrementalConsentDisabled = disabled;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtIProvider';\n  }\n\n  constructor() {\n    this._state = ProviderState.Loading;\n  }\n\n  /**\n   * sets state of Provider and fires loginchangedDispatcher\n   *\n   * @param {ProviderState} state\n   * @memberof IProvider\n   */\n  public setState(state: ProviderState) {\n    if (state !== this._state) {\n      this._state = state;\n      this._loginChangedDispatcher.fire({});\n    }\n  }\n\n  /**\n   * event handler when login changes\n   *\n   * @param {EventHandler<LoginChangedEvent>} eventHandler\n   * @memberof IProvider\n   */\n  public onStateChanged(eventHandler: EventHandler<LoginChangedEvent>) {\n    this._loginChangedDispatcher.add(eventHandler);\n  }\n  /**\n   * removes event handler for when login changes\n   *\n   * @param {EventHandler<LoginChangedEvent>} eventHandler\n   * @memberof IProvider\n   */\n  public removeStateChangedHandler(eventHandler: EventHandler<LoginChangedEvent>) {\n    this._loginChangedDispatcher.remove(eventHandler);\n  }\n\n  /**\n   * option implementation that can be called to sign in user (required for mgt-login to work)\n   *\n   * @returns {Promise<void>}\n   * @memberof IProvider\n   */\n  public login?(): Promise<void>;\n\n  /**\n   * optional implementation that can be called to sign out user (required for mgt-login to work)\n   *\n   * @returns {Promise<void>}\n   * @memberof IProvider\n   */\n  public logout?(): Promise<void>;\n\n  /**\n   * Returns all signed in accounts.\n   *\n   * @return {*}  {any[]}\n   * @memberof IProvider\n   */\n  public getAllAccounts?(): IProviderAccount[];\n\n  /**\n   * Returns active account in case of multi-account sign in\n   *\n   * @return {*}  {any[]}\n   * @memberof IProvider\n   */\n  public getActiveAccount?(): IProviderAccount;\n\n  /**\n   * Switch between two signed in accounts\n   *\n   * @param {*} user\n   * @memberof IProvider\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public setActiveAccount?(user: IProviderAccount) {\n    this.fireActiveAccountChanged();\n  }\n\n  /**\n   * Event handler when Active account changes\n   *\n   * @param {EventHandler<ActiveAccountChanged>} eventHandler\n   * @memberof IProvider\n   */\n  public onActiveAccountChanged(eventHandler: EventHandler<ActiveAccountChanged>) {\n    this._activeAccountChangedDispatcher.add(eventHandler);\n  }\n\n  /**\n   * Removes event handler for when Active account changes\n   *\n   * @param {EventHandler<ActiveAccountChanged>} eventHandler\n   * @memberof IProvider\n   */\n  public removeActiveAccountChangedHandler(eventHandler: EventHandler<ActiveAccountChanged>) {\n    this._activeAccountChangedDispatcher.remove(eventHandler);\n  }\n\n  /**\n   * Fires event when active account changes\n   *\n   * @memberof IProvider\n   */\n  private fireActiveAccountChanged() {\n    this._activeAccountChangedDispatcher.fire({});\n  }\n\n  /**\n   * uses scopes to recieve access token\n   *\n   * @param {...string[]} scopes\n   * @returns {Promise<string>}\n   * @memberof IProvider\n   */\n  public getAccessTokenForScopes(...scopes: string[]): Promise<string> {\n    return this.getAccessToken({ scopes });\n  }\n\n  /**\n   * Promise to receive access token using Provider options\n   *\n   * @abstract\n   * @param {AuthenticationProviderOptions} [options]\n   * @returns {Promise<string>}\n   * @memberof IProvider\n   */\n  public abstract getAccessToken(options?: AuthenticationProviderOptions): Promise<string>;\n}\n\n/**\n * ActiveAccountChanged Event\n *\n * @export\n * @interface ActiveAccountChanged\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActiveAccountChanged {}\n/**\n * loginChangedEvent\n *\n * @export\n * @interface LoginChangedEvent\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface LoginChangedEvent {}\n\n/**\n * LoginType\n *\n * @export\n * @enum {number}\n */\nexport enum LoginType {\n  /**\n   * Popup = 0\n   */\n  Popup,\n  /**\n   * Redirect = 1\n   */\n  Redirect\n}\n\n/**\n * ProviderState\n *\n * @export\n * @enum {number}\n */\nexport enum ProviderState {\n  /**\n   * Loading = 0\n   */\n  Loading,\n  /**\n   * SignedOut = 1\n   */\n  SignedOut,\n  /**\n   * SignedIn = 2\n   */\n  SignedIn\n}\n\n/**\n * Account details\n *\n * @export\n */\nexport interface IProviderAccount {\n  id: string;\n  mail?: string;\n  name?: string;\n  tenantId?: string;\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { User } from '@microsoft/microsoft-graph-types';\n\nimport { EventDispatcher, EventHandler } from '../utils/EventDispatcher';\nimport { IProvider, ProviderState } from './IProvider';\n\n/**\n * Provides implementation for acquiring the necessary access token for calling the Microsoft Graph APIs.\n *\n * @export\n * @class Providers\n */\nexport class Providers {\n  /**\n   * returns the value of provider used globally. All components use this property to get a reference to the provider.\n   *\n   * @static\n   * @type {IProvider}\n   * @memberof Providers\n   */\n  public static get globalProvider(): IProvider {\n    return this._globalProvider;\n  }\n\n  public static set globalProvider(provider: IProvider) {\n    if (provider !== this._globalProvider) {\n      if (this._globalProvider) {\n        this._globalProvider.removeStateChangedHandler(this.handleProviderStateChanged);\n        if (this._globalProvider.isMultiAccountSupportedAndEnabled) {\n          this._globalProvider.removeActiveAccountChangedHandler(this.handleActiveAccountChanged);\n        }\n      }\n\n      if (provider) {\n        provider.onStateChanged(this.handleProviderStateChanged);\n        if (provider.isMultiAccountSupportedAndEnabled) {\n          provider.onActiveAccountChanged(this.handleActiveAccountChanged);\n        }\n      }\n\n      this._globalProvider = provider;\n      this._eventDispatcher.fire(ProvidersChangedState.ProviderChanged);\n    }\n  }\n\n  /**\n   * Fires event when Provider changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static onProviderUpdated(event: EventHandler<ProvidersChangedState>) {\n    this._eventDispatcher.add(event);\n  }\n\n  /**\n   * Remove event handler\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static removeProviderUpdatedListener(event: EventHandler<ProvidersChangedState>) {\n    this._eventDispatcher.remove(event);\n  }\n\n  /**\n   * Fires event when Provider changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static onActiveAccountChanged(event: EventHandler<unknown>) {\n    this._activeAccountChangedDispatcher.add(event);\n  }\n\n  /**\n   * Remove event handler\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static removeActiveAccountChangedListener(event: EventHandler<unknown>) {\n    this._activeAccountChangedDispatcher.remove(event);\n  }\n\n  /**\n   * Gets the current signed in user\n   *\n   * @static\n   * @memberof Providers\n   */\n  public static me(): Promise<User> {\n    if (!this.client) {\n      this._mePromise = null;\n      return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (!this._mePromise) {\n      this._mePromise = this.getMe();\n    }\n\n    return this._mePromise;\n  }\n\n  /**\n   * Get current signed in user details\n   *\n   * @private\n   * @static\n   * @return {*}  {Promise<User>}\n   * @memberof Providers\n   */\n  private static async getMe(): Promise<User> {\n    try {\n      const response: User = (await this.client.api('me').get()) as User;\n      if (response?.id) {\n        return response;\n      }\n    } catch {\n      // no-op\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets the cache ID, creates one if it does not exist\n   *\n   * @static\n   * @memberof Providers\n   */\n  public static async getCacheId() {\n    if (this._cacheId) {\n      return this._cacheId;\n    }\n    if (Providers.globalProvider?.state === ProviderState.SignedIn) {\n      if (!this._cacheId) {\n        const client = this.client;\n        if (client) {\n          try {\n            this._cacheId = await this.createCacheId();\n          } catch {\n            // no-op\n          }\n        }\n      }\n    }\n    return this._cacheId;\n  }\n\n  /**\n   * Unset the cache ID\n   *\n   * @static\n   * @memberof Providers\n   */\n  private static unsetCacheId() {\n    this._cacheId = null;\n    this._mePromise = null;\n  }\n\n  /**\n   * Create cache ID\n   *\n   * @private\n   * @static\n   * @return {*}  {Promise<string>}\n   * @memberof Providers\n   */\n  private static async createCacheId(): Promise<string> {\n    if (Providers.globalProvider.isMultiAccountSupportedAndEnabled) {\n      const cacheId = this.createCacheIdWithAccountDetails();\n      if (cacheId) {\n        return cacheId;\n      }\n    }\n    return await this.createCacheIdWithUserDetails();\n  }\n\n  /**\n   * Create a cache ID with user userID and principal name\n   *\n   * @static\n   * @param {User} response\n   * @return {*}\n   * @memberof Providers\n   */\n  private static async createCacheIdWithUserDetails(): Promise<string> {\n    const response: User = await this.me();\n    if (response?.id) {\n      return response.id + '-' + response.userPrincipalName;\n    } else return null;\n  }\n\n  /**\n   * Create cache ID with tenant ID and user ID\n   *\n   * @private\n   * @static\n   * @return {*}  {string}\n   * @memberof Providers\n   */\n  private static createCacheIdWithAccountDetails(): string {\n    const user = Providers.globalProvider.getActiveAccount();\n    if (user.tenantId && user.id) {\n      return user.tenantId + user.id;\n    } else return null;\n  }\n\n  /**\n   * Gets the current graph client\n   *\n   * @readonly\n   * @static\n   * @type {Client}\n   * @memberof Providers\n   */\n  public static get client(): Client {\n    if (Providers.globalProvider && Providers.globalProvider.state === ProviderState.SignedIn) {\n      return Providers.globalProvider.graph.client;\n    }\n    return null;\n  }\n\n  private static readonly _eventDispatcher = new EventDispatcher<ProvidersChangedState>();\n\n  private static readonly _activeAccountChangedDispatcher = new EventDispatcher<unknown>();\n\n  private static _globalProvider: IProvider;\n  private static _cacheId: string;\n  private static _mePromise: Promise<User>;\n\n  private static readonly handleProviderStateChanged = () => {\n    if (!Providers.globalProvider || Providers.globalProvider.state !== ProviderState.SignedIn) {\n      // clear current signed in user info\n      Providers._mePromise = null;\n    }\n\n    Providers._eventDispatcher.fire(ProvidersChangedState.ProviderStateChanged);\n  };\n\n  private static readonly handleActiveAccountChanged = () => {\n    Providers.unsetCacheId();\n    Providers._activeAccountChangedDispatcher.fire(null);\n  };\n}\n\n/**\n * on Provider Change State\n *\n * @export\n * @enum {number}\n */\nexport enum ProvidersChangedState {\n  /**\n   * ProviderChanged = 0\n   */\n  ProviderChanged,\n  /**\n   * ProviderStateChanged = 1\n   */\n  ProviderStateChanged\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * An EventHandler for custom events\n */\nexport type EventHandler<E> = (event: E) => void;\n\n/**\n * Provider EventDispatcher\n *\n * @export\n * @class EventDispatcher\n * @template E\n */\nexport class EventDispatcher<E> {\n  private readonly eventHandlers: EventHandler<E>[] = [];\n  /**\n   * fires event handler\n   *\n   * @param {E} event\n   * @memberof EventDispatcher\n   */\n\n  public fire(event: E) {\n    for (const handler of this.eventHandlers) {\n      handler(event);\n    }\n  }\n\n  /**\n   * adds eventHandler\n   *\n   * @param {EventHandler<E>} eventHandler\n   * @memberof EventDispatcher\n   */\n  public add(eventHandler: EventHandler<E>) {\n    this.eventHandlers.push(eventHandler);\n  }\n\n  /**\n   * removes eventHandler\n   *\n   * @param {EventHandler<E>} eventHandler\n   * @memberof EventDispatcher\n   */\n  public remove(eventHandler: EventHandler<E>) {\n    for (let i = 0; i < this.eventHandlers.length; i++) {\n      if (this.eventHandlers[i] === eventHandler) {\n        this.eventHandlers.splice(i, 1);\n        i--;\n      }\n    }\n  }\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphEndpoint, MICROSOFT_GRAPH_ENDPOINTS } from '../IGraph';\n\n/**\n * Helper method to validate a base URL string\n *\n * @param url a URL string\n * @returns GraphEndpoint\n */\n\nexport const validateBaseURL = (url: string): GraphEndpoint => {\n  try {\n    const urlObj = new URL(url);\n    const originAsEndpoint = urlObj.origin as GraphEndpoint;\n    if (MICROSOFT_GRAPH_ENDPOINTS.has(originAsEndpoint)) {\n      return originAsEndpoint;\n    }\n  } catch (error) {\n    return;\n  }\n};\n"],"names":["MICROSOFT_GRAPH_DEFAULT_ENDPOINT","MICROSOFT_GRAPH_ENDPOINTS","Set","LoginType","ProviderState","IProvider","isMultiAccountSupportedAndEnabled","approvedScopes","this","_approvedScopes","value","map","v","toLowerCase","hasAtLeastOneApprovedScope","requiredScopeSet","some","s","includes","trim","hasAllOneApprovedScope","needsAdditionalScopes","reqScopes","length","push","baseURL","url","validateBaseURL","Error","concat","_baseURL","customHosts","hosts","_customHosts","isMultiAccountSupported","isMultipleAccountSupported","state","_state","isIncrementalConsentDisabled","_isIncrementalConsentDisabled","disabled","name","constructor","isMultipleAccountDisabled","_loginChangedDispatcher","EventDispatcher","_activeAccountChangedDispatcher","undefined","Loading","setState","fire","onStateChanged","eventHandler","add","removeStateChangedHandler","remove","setActiveAccount","user","fireActiveAccountChanged","onActiveAccountChanged","removeActiveAccountChangedHandler","getAccessTokenForScopes","_len","arguments","scopes","Array","_key","getAccessToken","ProvidersChangedState","Providers","globalProvider","_globalProvider","provider","handleProviderStateChanged","handleActiveAccountChanged","_eventDispatcher","ProviderChanged","onProviderUpdated","event","removeProviderUpdatedListener","removeActiveAccountChangedListener","me","client","_mePromise","getMe","response","api","get","id","_a","getCacheId","_cacheId","SignedIn","createCacheId","_b","unsetCacheId","cacheId","createCacheIdWithAccountDetails","createCacheIdWithUserDetails","userPrincipalName","getActiveAccount","tenantId","graph","ProviderStateChanged","eventHandlers","handler","i","splice","originAsEndpoint","URL","origin","has","error"],"sourceRoot":""}