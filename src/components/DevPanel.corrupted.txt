import React from 'react';import React, { useEffect, useState } from 'react';

import { useRuntimeMock } from '../utils/runtimeMock';

// Minimal placeholder to avoid TypeScript errors during mock-mode development.import { runAuthAndGraphCheck } from '../diagnostics/health';

// The real developer panel for mock mode is `MockDevPanel`. This file intentionally

// exports a no-op component to keep the TS compiler happy and avoid past corruption issues.const DevPanel: React.FC = () => {

const DevPanel: React.FC = () => null;  const [open, setOpen] = useState(false);

  const [state, setState] = useState<Record<string, any>>({});

export default DevPanel;  const [diag, setDiag] = useState<Array<{ name: string; ok: boolean; detail?: string }>>([]);

  const runtimeMock = useRuntimeMock();

  // Only render in mock mode
  if (!runtimeMock) return null;

  const reload = () => {
    const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];
    const obj: Record<string, any> = {};
    for (const k of keys) obj[k] = (() => { try { return JSON.parse(localStorage.getItem(k) || 'null'); } catch { return localStorage.getItem(k); } })();
    setState(obj);
  };

  useEffect(() => {
    reload();
    const h = () => reload();
    window.addEventListener('mockAck', h as EventListener);
    const roleH = (e: Event) => {
      const ev = e as CustomEvent<any>;
      if (ev?.detail?.role) console.info('DevPanel: role changed', ev.detail.role);
      reload();
    };
    window.addEventListener('sunbeth:roleChange', roleH as EventListener);
    const mockDataH = () => reload();
    window.addEventListener('mockDataChanged', mockDataH as EventListener);
    return () => {
      window.removeEventListener('mockAck', h as EventListener);
      window.removeEventListener('sunbeth:roleChange', roleH as EventListener);
      window.removeEventListener('mockDataChanged', mockDataH as EventListener);
    };
  }, []);

  const clearMock = () => {
    const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];
    for (const k of keys) localStorage.removeItem(k);
    reload();
    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}
  };

  const setGroups = (kind: 'Admin' | 'Manager' | 'Employee' | 'Clear') => {
    if (kind === 'Admin') localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Portal-Admins']));
    if (kind === 'Manager') localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Dept-Managers']));
    if (kind === 'Employee') localStorage.setItem('mock_user_groups', JSON.stringify([]));
    if (kind === 'Clear') localStorage.removeItem('mock_user_groups');
    reload();
    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: kind === 'Admin' ? 'Admin' : kind === 'Manager' ? 'Manager' : 'Employee', mock: true } })); } catch {}
  };

  const seedMock = () => {
    const batches = [
      { toba_batchid: '1', toba_name: 'Q4 2025 — Code of Conduct', toba_startdate: '2025-10-01', toba_duedate: '2025-10-31' },
      { toba_batchid: '2', toba_name: 'Q3 2025 — Health & Safety', toba_startdate: '2025-07-01', toba_duedate: '2025-07-31' }
    ];
    const docs: Record<string, any[]> = {
      '1': [
        { toba_documentid: 'd1', toba_title: 'Code of Conduct', toba_version: 'v1.0' },
        { toba_documentid: 'd2', toba_title: 'Anti-Bribery Policy', toba_version: 'v1.1' }
      ],
      '2': [
        { toba_documentid: 'd3', toba_title: 'Health & Safety Guide', toba_version: 'v2.0' }
      ]
    };
    const acks = { '1': [] };
    localStorage.setItem('mock_batches', JSON.stringify(batches));
    localStorage.setItem('mock_docs_by_batch', JSON.stringify(docs));
    localStorage.setItem('mock_user_acks', JSON.stringify(acks));
    reload();
    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}
  };

  return (
    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>
      <button className="btn" onClick={() => setOpen(o => !o)}>{open ? 'Close Dev' : 'Dev Panel'}</button>
      {open && (
        <div style={{ width: 360, maxHeight: 480, overflow: 'auto', marginTop: 8 }} className="card">
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div style={{ fontWeight: 700 }}>Dev Panel</div>
            <div className="small muted">Mock mode</div>
          </div>
          <hr />

          <div>
            <div style={{ fontWeight: 700 }}>Mock User Groups</div>
            <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>Controls role via localStorage</div>
            <div style={{ display: 'flex', gap: 6, flexWrap: 'wrap' }}>
              <button className="btn sm" onClick={() => setGroups('Admin')}>Set Admin</button>
              <button className="btn sm" onClick={() => setGroups('Manager')}>Set Manager</button>
              <button className="btn sm" onClick={() => setGroups('Employee')}>Set Employee</button>
              <button className="btn sm ghost" onClick={() => setGroups('Clear')}>Clear Groups</button>
            </div>
            <pre style={{ fontSize: 12, background: '#fafafa', padding: 8, marginTop: 6 }}>{JSON.stringify(state['mock_user_groups'], null, 2)}</pre>
          </div>

          <div style={{ marginTop: 12 }}>
            <div style={{ fontWeight: 700 }}>Seed Mock Data</div>
            <div style={{ display: 'flex', gap: 6, marginTop: 6 }}>
              <button className="btn sm" onClick={seedMock}>Seed</button>
              <button className="btn sm ghost" onClick={clearMock}>Clear</button>
              <button className="btn sm ghost" onClick={reload}>Refresh</button>
            </div>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: 8, marginTop: 8 }}>
              <div>
                <div style={{ fontWeight: 700 }}>mock_batches</div>
                <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>{JSON.stringify(state['mock_batches'], null, 2)}</pre>
              </div>
              <div>
                <div style={{ fontWeight: 700 }}>mock_docs_by_batch</div>
                <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>{JSON.stringify(state['mock_docs_by_batch'], null, 2)}</pre>
              </div>
              <div>
                <div style={{ fontWeight: 700 }}>mock_user_acks</div>
                <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>{JSON.stringify(state['mock_user_acks'], null, 2)}</pre>
              </div>
            </div>
          </div>

          <div style={{ marginTop: 12 }}>
            <div style={{ fontWeight: 700 }}>Landing Variant</div>
            <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>Controls hero layout on landing page</div>
            <div style={{ display: 'flex', gap: 6 }}>
              <button className="btn sm" onClick={() => { localStorage.setItem('landing_variant','regular'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Regular</button>
              <button className="btn sm" onClick={() => { localStorage.setItem('landing_variant','compact'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Compact</button>
              <button className="btn sm ghost" onClick={() => { localStorage.removeItem('landing_variant'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Clear</button>
            </div>
            <div className="small muted" style={{ marginTop: 6 }}>Current: <strong>{state['landing_variant'] || 'regular'}</strong></div>
          </div>

          <div style={{ marginTop: 12 }}>
            <div style={{ fontWeight: 700 }}>Diagnostics</div>
            <div style={{ display: 'flex', gap: 6, marginTop: 6 }}>
              <button className="btn sm" onClick={async () => { setDiag([]); const r = await runAuthAndGraphCheck(); setDiag(r); }}>Run Diagnostics</button>
              <button className="btn sm ghost" onClick={() => setDiag([])}>Clear</button>
            </div>
            {diag.length > 0 && (
              <div style={{ marginTop: 8 }}>
                <ul style={{ paddingLeft: 16 }}>
                  {diag.map((d,i) => (<li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>{d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}</li>))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default DevPanel;
import React, { useState } from 'react';
import { useRBAC } from '../context/RBACContext';
import { useRuntimeMock } from '../utils/runtimeMock';

const DevPanel: React.FC = () => {
  const rbac = useRBAC();
  const runtimeMock = useRuntimeMock();
  const [open, setOpen] = useState(false);

  if (!runtimeMock && !rbac.isSuperAdmin) return null;

  return (
    <div style={{ position: 'fixed', right: 12, bottom: 12, padding: 8, background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, boxShadow: '0 4px 12px rgba(0,0,0,0.12)', zIndex: 9999 }}>
      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <strong>Dev Panel</strong>
        {rbac.isSuperAdmin && <span style={{ color: '#dc2626' }}>⚡</span>}
        <button className="btn sm" onClick={() => setOpen(o => !o)}>{open ? 'Hide' : 'Show'}</button>
      </div>
      {open && (
        <div style={{ marginTop: 8, fontSize: 12 }}>
          <div>Mock Mode: {String(runtimeMock)}</div>
          <div>Role: <strong style={{ color: rbac.isSuperAdmin ? '#dc2626' : '#2563eb' }}>{rbac.role}</strong></div>
          {rbac.user && <div className="muted small">{rbac.user.displayName || rbac.user.userPrincipalName}</div>}
        </div>
      )}
    </div>
  );
};

export default DevPanel;
import React, { useState } from 'react';
import { useRBAC } from '../context/RBACContext';
import { useRuntimeMock } from '../utils/runtimeMock';

const DevPanel: React.FC = () => {
  const rbac = useRBAC();
  const runtimeMock = useRuntimeMock();
  const [open, setOpen] = useState(false);

  // Only show in mock mode or for Super Admins in live mode
  if (!runtimeMock && !rbac.isSuperAdmin) return null;

  return (
    <div
      style={{
        position: 'fixed',
        bottom: 12,
        right: 12,
        background: '#fff',
        border: '1px solid #e5e7eb',
        borderRadius: 8,
        boxShadow: '0 6px 18px rgba(0,0,0,0.12)',
        padding: 10,
        zIndex: 9999,
        width: 300,
        fontSize: 12
      }}
    >
      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <div style={{ fontWeight: 700 }}>
          🛠️ Dev Panel {rbac.isSuperAdmin && <span style={{ color: '#dc2626' }}>⚡</span>}
        </div>
        <button className="btn sm" onClick={() => setOpen((v) => !v)}>{open ? 'Hide' : 'Show'}</button>
      </div>

      {open && (
        <div style={{ marginTop: 8, borderTop: '1px solid #eee', paddingTop: 8 }}>
          <div style={{ marginBottom: 8 }}>
            <div style={{ fontWeight: 700 }}>Session</div>
            <div>Mock Mode: {String(runtimeMock)}</div>
            <div>
              Role: <strong style={{ color: rbac.isSuperAdmin ? '#dc2626' : '#2563eb' }}>{rbac.role}</strong>
              {rbac.isSuperAdmin && <span style={{ marginLeft: 4, color: '#dc2626' }}>(Super Admin)</span>}
            </div>
            {rbac.user && (
              <div style={{ color: '#6b7280' }}>
                {rbac.user.displayName || rbac.user.userPrincipalName}
              </div>
            )}
          </div>

          <div style={{ marginTop: 8 }}>
            <div style={{ fontWeight: 700 }}>Environment</div>
            <div className="muted small">Client ID: {process.env.REACT_APP_CLIENT_ID?.slice(0, 8)}...</div>
            <div className="muted small">Tenant ID: {process.env.REACT_APP_TENANT_ID?.slice(0, 8)}...</div>
          </div>

          {runtimeMock ? (
            <div style={{ marginTop: 8 }}>
              <div style={{ fontWeight: 700 }}>Mock Tools</div>
              <div className="muted small">Use localStorage to seed batches, documents, and acks.</div>
            </div>
          ) : (
            <div style={{ marginTop: 8 }}>
              <div style={{ fontWeight: 700, color: '#dc2626' }}>Live Mode</div>
              <div className="muted small">Super Admin access is granted via REACT_APP_SUPER_ADMINS.</div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default DevPanel;
import React, { useState, useEffect } from 'react';import React, { useState } from 'react';import React, { useState } from 'react';import React, { useState } from 'react';import React, { useEffect, useState } from 'react';import React, { useEffect, useState } from 'react';import React, { useEffect, useState } from 'react';

import { useRBAC } from '../context/RBACContext';

import { useRuntimeMock } from '../utils/runtimeMock';

interface DiagnosticResult {

  name: string;import { useRBAC } from '../context/RBACContext';import { useRuntimeMock } from '../utils/runtimeMock';

  ok: boolean;

  detail?: string;

}

const DevPanel: React.FC = () => {import { useRBAC } from '../context/RBACContext';import { useRuntimeMock } from '../utils/runtimeMock';

const useRuntimeMock = () => {

  return process.env.REACT_APP_USE_MOCK === 'true';  const [open, setOpen] = useState(false);

};

  const runtimeMock = useRuntimeMock();

const DevPanel: React.FC = () => {

  const rbac = useRBAC();  const rbac = useRBAC();

  const runtimeMock = useRuntimeMock();

  const [open, setOpen] = useState(false);const DevPanel: React.FC = () => {import { useRBAC } from '../context/RBACContext';import { useRuntimeMock } from '../utils/runtimeMock';

  const [diag, setDiag] = useState<DiagnosticResult[]>([]);

  // Show DevPanel in mock mode OR for super admins in live mode

  // Only show DevPanel in mock mode OR for super admins in live mode

  if (!runtimeMock && !rbac.isSuperAdmin) {  if (!runtimeMock && !rbac.isSuperAdmin) return null;  const [open, setOpen] = useState(false);

    return null;

  }



  const runDiagnostics = async () => {  return (  const runtimeMock = useRuntimeMock();

    setDiag([]);

    const results: DiagnosticResult[] = [];    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>

    

    // Auth check      <button className="btn" onClick={() => setOpen(!open)}>  const rbac = useRBAC();

    results.push({

      name: 'Authentication',        {open ? 'Close Dev' : 'Dev Panel'}

      ok: rbac.user !== null,

      detail: rbac.user ? `Signed in as ${rbac.user.displayName}` : 'Not authenticated'      </button>const DevPanel: React.FC = () => {import { useRBAC } from '../context/RBACContext';import { useRuntimeMock } from '../utils/runtimeMock';import { useRuntimeMock } from '../utils/runtimeMock';

    });

      {open && (

    // Role check

    results.push({        <div style={{ width: 300, marginTop: 8 }} className="card">  // Show DevPanel in mock mode OR for super admins in live mode

      name: 'Role Assignment',

      ok: rbac.role !== 'User',          <div style={{ fontWeight: 700 }}>Dev Panel</div>

      detail: `Current role: ${rbac.role}${rbac.isSuperAdmin ? ' (Super Admin)' : ''}`

    });          <div className="small muted">  if (!runtimeMock && !rbac.isSuperAdmin) return null;  const [open, setOpen] = useState(false);



    // Environment check            {runtimeMock ? 'Mock mode' : 'Live mode (Super Admin)'}

    results.push({

      name: 'Environment',          </div>

      ok: true,

      detail: `Mock mode: ${runtimeMock ? 'Enabled' : 'Disabled'}`          <hr />

    });

            return (  const runtimeMock = useRuntimeMock();import { runAuthAndGraphCheck } from '../diagnostics/health';

    setDiag(results);

  };          <div>



  return (            <div style={{ fontWeight: 700 }}>Current Role</div>    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>

    <div style={{

      position: 'fixed',            <div style={{ fontSize: 12, color: '#666' }}>

      top: 10,

      right: 10,              Role: <strong style={{ color: rbac.isSuperAdmin ? '#dc2626' : '#d63384' }}>      <button className="btn" onClick={() => setOpen(!open)}>  const rbac = useRBAC();

      background: 'white',

      border: '1px solid #ccc',                {rbac.role}

      borderRadius: 4,

      padding: '8px 12px',                {rbac.isSuperAdmin && ' ⚡'}        {open ? 'Close Dev' : 'Dev Panel'}

      fontSize: 12,

      zIndex: 9999,              </strong>

      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',

      maxWidth: 320              {rbac.isSuperAdmin && (      </button>import { useRBAC } from '../context/RBACContext';import { useRBAC } from '../context/RBACContext';

    }}>

      <button                 <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>

        className="btn" 

        onClick={() => setOpen(!open)}              )}      {open && (

        style={{ fontSize: 12, padding: '4px 8px' }}

      >            </div>

        🛠️ Dev Panel

      </button>                    <div style={{ width: 300, marginTop: 8 }} className="card">  // Show DevPanel in mock mode OR for super admins in live mode



      {open && (            {!runtimeMock && rbac.isSuperAdmin && (

        <div style={{ marginTop: 8, paddingTop: 8, borderTop: '1px solid #eee' }}>

          <div>              <div style={{ marginTop: 8, padding: 8, background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>          <div style={{ fontWeight: 700 }}>Dev Panel</div>

            <div style={{ fontWeight: 700 }}>Current Role</div>

            <div style={{ marginTop: 4 }}>                <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>

              Role: <strong style={{ color: rbac.isSuperAdmin ? '#dc2626' : '#d63384' }}>

                {rbac.role}                <div style={{ fontSize: 11, color: '#666' }}>          <div className="small muted">  if (!runtimeMock && !rbac.isSuperAdmin) return null;const DevPanel: React.FC = () => {

                {rbac.isSuperAdmin && ' ⚡'}

              </strong>                  Email: oluwatoba.ogunsakin@sunbeth.net<br/>

            </div>

                              Source: Environment Variable            {runtimeMock ? 'Mock mode' : 'Live mode (Super Admin)'}

            {rbac.isSuperAdmin && (

              <div style={{ fontSize: 11, color: '#666', marginTop: 2 }}>                </div>

                Email: {rbac.user?.mail || rbac.user?.userPrincipalName}<br/>

                Source: Environment Variable              </div>          </div>

              </div>

            )}            )}

          </div>

          </div>          <hr />

          <hr style={{ margin: '8px 0' }} />

        </div>

          {runtimeMock ? (

            // Mock mode content      )}            return (  const [open, setOpen] = useState(false);import { runAuthAndGraphCheck } from '../diagnostics/health';import { runAuthAndGraphCheck } from '../diagnostics/health';

            <div>

              <div style={{ fontWeight: 700 }}>Mock Mode Features</div>    </div>

              <div style={{ marginTop: 6, fontSize: 12 }}>

                <div style={{ color: '#059669' }}>✅ Role Switching</div>  );          <div>

                <div style={{ color: '#059669' }}>✅ Landing Variants</div>

                <div style={{ color: '#059669' }}>✅ Development Tools</div>};

              </div>

            </div>            <div style={{ fontWeight: 700 }}>Current Role</div>    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>

          ) : (

            // Live mode - Super Admin contentexport default DevPanel;

            <div>            <div style={{ fontSize: 12, color: '#666' }}>

              <div style={{ marginTop: 8 }}>

                <div style={{ fontWeight: 700 }}>Super Admin Panel</div>              Role: <strong style={{ color: rbac.isSuperAdmin ? '#dc2626' : '#d63384' }}>      <button className="btn" onClick={() => setOpen(!open)}>  const [state, setState] = useState<Record<string, any>>({});

                <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>

                  Current Role: <strong style={{ color: '#dc2626' }}>                {rbac.role}

                    {rbac.role} ⚡

                  </strong>                {rbac.isSuperAdmin && ' ⚡'}        {open ? 'Close Dev' : 'Dev Panel'}

                  <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>

                </div>              </strong>

                <div style={{ marginTop: 8, padding: '8px 12px', background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>

                  <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>              {rbac.isSuperAdmin && <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>}      </button>  const runtimeMock = useRuntimeMock();

                  <div style={{ fontSize: 11, color: '#666', marginTop: 2 }}>

                    Email: {rbac.user?.mail || rbac.user?.userPrincipalName}<br/>            </div>

                    Source: Environment Variable (REACT_APP_SUPER_ADMINS)

                  </div>                  {open && (

                </div>

              </div>            {!runtimeMock && rbac.isSuperAdmin && (



              <div style={{ marginTop: 12 }}>              <div style={{ marginTop: 8, padding: 8, background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>        <div style={{ width: 300, marginTop: 8 }} className="card">  const rbac = useRBAC();

                <div style={{ fontWeight: 700 }}>Live Mode Diagnostics</div>

                <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>                <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>

                  <button className="btn" onClick={runDiagnostics}>Run Diagnostics</button>

                  <button className="btn ghost" onClick={() => setDiag([])}>Clear</button>                <div style={{ fontSize: 11, color: '#666' }}>          <div style={{ fontWeight: 700 }}>Dev Panel</div>

                </div>

                {diag.length > 0 && (                  Email: oluwatoba.ogunsakin@sunbeth.net<br/>

                  <div style={{ marginTop: 8 }}>

                    <ul style={{ paddingLeft: 16 }}>                  Source: Environment Variable          <div className="small muted">const DevPanel: React.FC = () => {const DevPanel: React.FC = () => {

                      {diag.map((d, i) => (

                        <li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>                </div>

                          {d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}

                        </li>              </div>            {runtimeMock ? 'Mock mode' : 'Live mode (Super Admin)'}

                      ))}

                    </ul>            )}

                  </div>

                )}          </div>          </div>  const reload = () => {

              </div>

        </div>

              <div style={{ marginTop: 12 }}>

                <div style={{ fontWeight: 700 }}>Admin Features Access</div>      )}          <hr />

                <div style={{ marginTop: 6, fontSize: 12 }}>

                  <div style={{ color: '#059669' }}>✅ Admin Panel (/admin)</div>    </div>

                  <div style={{ color: '#059669' }}>✅ Microsoft Graph Integration</div>

                  <div style={{ color: '#059669' }}>✅ SharePoint Document Access</div>  );              const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];  const [open, setOpen] = useState(false);  const [open, setOpen] = useState(false);

                  <div style={{ color: '#059669' }}>✅ Analytics Dashboard</div>

                  <div style={{ color: '#059669' }}>✅ User & Group Management</div>};

                  <div style={{ color: '#059669' }}>✅ Batch Creation</div>

                </div>          <div>

              </div>

            </div>export default DevPanel;

          )}            <div style={{ fontWeight: 700 }}>Current Role</div>    const obj: Record<string, any> = {};



          <div style={{ marginTop: 12 }}>            <div style={{ fontSize: 12, color: '#666' }}>

            <div style={{ fontWeight: 700 }}>Environment Configuration</div>

            <div style={{ marginTop: 6, fontSize: 11, color: '#666' }}>              Role: <strong style={{     for (const k of keys) obj[k] = (() => { try { return JSON.parse(localStorage.getItem(k) || 'null'); } catch { return localStorage.getItem(k); } })();  const [state, setState] = useState<Record<string, any>>({});  const [state, setState] = useState<Record<string, any>>({});

              <div>Mock Mode: {process.env.REACT_APP_USE_MOCK}</div>

              <div>Client ID: {process.env.REACT_APP_CLIENT_ID?.substring(0, 8)}...</div>                color: rbac.role === 'SuperAdmin' ? '#dc2626' : rbac.role === 'Admin' ? '#d63384' : rbac.role === 'Manager' ? '#fd7e14' : '#198754' 

              <div>Tenant ID: {process.env.REACT_APP_TENANT_ID?.substring(0, 8)}...</div>

            </div>              }}>    setState(obj);

          </div>

        </div>                {rbac.role}

      )}

    </div>                {rbac.isSuperAdmin && ' ⚡'}  };  const runtimeMock = useRuntimeMock();  const runtimeMock = useRuntimeMock();

  );

};              </strong>



export default DevPanel;              {rbac.isSuperAdmin && <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>}

            </div>

              useEffect(() => {  const rbac = useRBAC();  const rbac = useRBAC();

            {!runtimeMock && rbac.isSuperAdmin && (

              <div style={{ marginTop: 8, padding: 8, background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>    reload();

                <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>

                <div style={{ fontSize: 11, color: '#666' }}>    const h = () => reload();

                  Email: oluwatoba.ogunsakin@sunbeth.net<br/>

                  Source: Environment Variable    window.addEventListener('mockAck', h as EventListener);

                </div>

              </div>    const roleH = (e: Event) => {  const reload = () => {  const reload = () => {

            )}

          </div>      const ev = e as CustomEvent<any>;

        </div>

      )}      if (ev?.detail?.role) console.info('DevPanel: role changed', ev.detail.role);    const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];    const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];

    </div>

  );      reload();

};

    };    const obj: Record<string, any> = {};    const obj: Record<string, any> = {};

export default DevPanel;
    window.addEventListener('sunbeth:roleChange', roleH as EventListener);

    const mockDataH = () => reload();    for (const k of keys) obj[k] = (() => { try { return JSON.parse(localStorage.getItem(k) || 'null'); } catch { return localStorage.getItem(k); } })();    for (const k of keys) obj[k] = (() => { try { return JSON.parse(localStorage.getItem(k) || 'null'); } catch { return localStorage.getItem(k); } })();

    window.addEventListener('mockDataChanged', mockDataH as EventListener);

    return () => {     setState(obj);    setState(obj);

      window.removeEventListener('mockAck', h as EventListener); 

      window.removeEventListener('sunbeth:roleChange', roleH as EventListener);   };  };

      window.removeEventListener('mockDataChanged', mockDataH as EventListener);

    };

  }, []);

  useEffect(() => {  useEffect(() => {

  const clear = () => {

    const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];    reload();    reload();

    for (const k of keys) localStorage.removeItem(k);

    reload();    const h = () => reload();    const h = () => reload();

    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}

    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Employee', mock: true } })); } catch {}    window.addEventListener('mockAck', h as EventListener);    window.addEventListener('mockAck', h as EventListener);

  };

    const roleH = (e: Event) => {    const roleH = (e: Event) => {

  const [diag, setDiag] = useState<Array<{name:string;ok:boolean;detail?:string}>>([]);

      const ev = e as CustomEvent<any>;      const ev = e as CustomEvent<any>;

  // Show DevPanel in mock mode OR for super admins in live mode

  if (!runtimeMock && !rbac.isSuperAdmin) return null;      if (ev?.detail?.role) console.info('DevPanel: role changed', ev.detail.role);      if (ev?.detail?.role) console.info('DevPanel: role changed', ev.detail.role);



  return (      reload();      reload();

    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>

      <button className="btn" onClick={() => setOpen(o => !o)}>    };    };

        {open ? 'Close Dev' : 'Dev Panel'}

      </button>    window.addEventListener('sunbeth:roleChange', roleH as EventListener);    window.addEventListener('sunbeth:roleChange', roleH as EventListener);

      {open && (

        <div style={{ width: 360, maxHeight: 420, overflow: 'auto', marginTop: 8 }} className="card">    const mockDataH = () => reload();    const mockDataH = () => reload();

          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>

            <div style={{ fontWeight: 700 }}>Dev Panel</div>    window.addEventListener('mockDataChanged', mockDataH as EventListener);    window.addEventListener('mockDataChanged', mockDataH as EventListener);

            <div className="small muted">

              {runtimeMock ? 'Mock mode' : 'Live mode (Super Admin)'}    return () => {     return () => { window.removeEventListener('mockAck', h as EventListener); window.removeEventListener('sunbeth:roleChange', roleH as EventListener); };

            </div>

          </div>      window.removeEventListener('mockAck', h as EventListener);   }, []);

          <hr />

                window.removeEventListener('sunbeth:roleChange', roleH as EventListener); 

          <div>

            <div style={{ fontWeight: 700 }}>Current Role</div>      window.removeEventListener('mockDataChanged', mockDataH as EventListener);  const clear = () => {

            <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>

              Role: <strong style={{     };    localStorage.removeItem('mock_user_acks');

                color: rbac.role === 'SuperAdmin' ? '#dc2626' : rbac.role === 'Admin' ? '#d63384' : rbac.role === 'Manager' ? '#fd7e14' : '#198754' 

              }}>  }, []);    localStorage.removeItem('mock_admin_settings');

                {rbac.role}

                {rbac.isSuperAdmin && ' ⚡'}    reload();

              </strong>

              {rbac.isSuperAdmin && <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>}  const clear = () => {  };

            </div>

                const keys = ['mock_user_acks', 'mock_admin_settings', 'mock_user_groups', 'mock_batches', 'mock_docs_by_batch', 'landing_variant'];

            {runtimeMock && (

              <div>    for (const k of keys) localStorage.removeItem(k);  const [diag, setDiag] = useState<Array<{name:string;ok:boolean;detail?:string}>>([]);

                <div style={{ fontWeight: 700, marginTop: 8 }}>Mock User Groups</div>

                <pre style={{ fontSize: 11, background: '#fafafa', padding: 4 }}>    reload();

                  {JSON.stringify(state['mock_user_groups'], null, 2)}

                </pre>    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}  // Show DevPanel in mock mode OR for super admins in live mode

                <div style={{ display: 'flex', gap: 4, marginTop: 6 }}>

                  <button className="btn" onClick={() => {     try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Employee', mock: true } })); } catch {}  if (!runtimeMock && !rbac.isSuperAdmin) return null;

                    localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Portal-Admins'])); 

                    reload();   };

                    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Admin', mock: true } })); } catch {} 

                  }}>Admin</button>  return (

                  <button className="btn" onClick={() => { 

                    localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Dept-Managers']));   const [diag, setDiag] = useState<Array<{name:string;ok:boolean;detail?:string}>>([]);    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>

                    reload(); 

                    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Manager', mock: true } })); } catch {}       <button className="btn" onClick={() => setOpen(o => !o)}>{open ? 'Close Dev' : 'Dev Panel'}</button>

                  }}>Manager</button>

                  <button className="btn" onClick={() => {   // Show DevPanel in mock mode OR for super admins in live mode      {open && (

                    localStorage.setItem('mock_user_groups', JSON.stringify([])); 

                    reload();   if (!runtimeMock && !rbac.isSuperAdmin) return null;        <div style={{ width: 360, maxHeight: 420, overflow: 'auto', marginTop: 8 }} className="card">

                    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Employee', mock: true } })); } catch {} 

                  }}>Employee</button>          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>

                </div>

              </div>  return (            <div style={{ fontWeight: 700 }}>Dev Panel</div>

            )}

    <div style={{ position: 'fixed', left: 12, bottom: 12, zIndex: 9999 }}>            <div className="small muted">{runtimeMock ? 'Mock mode' : 'Live mode (Super Admin)'}</div>

            {!runtimeMock && rbac.isSuperAdmin && (

              <div style={{ marginTop: 8, padding: '8px 12px', background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>      <button className="btn" onClick={() => setOpen(o => !o)}>          </div>

                <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>

                <div style={{ fontSize: 11, color: '#666', marginTop: 2 }}>        {open ? 'Close Dev' : 'Dev Panel'}          <hr />

                  Email: oluwatoba.ogunsakin@sunbeth.net<br/>

                  Source: Environment Variable      </button>          {runtimeMock ? (

                </div>

              </div>      {open && (            // Mock mode content

            )}

        <div style={{ width: 360, maxHeight: 420, overflow: 'auto', marginTop: 8 }} className="card">            <div>

            <div style={{ marginTop: 12 }}>

              <div style={{ fontWeight: 700 }}>Diagnostics</div>          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>            <div style={{ fontWeight: 700 }}>mock_user_acks</div>

              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>

                <button className="btn" onClick={async () => {             <div style={{ fontWeight: 700 }}>Dev Panel</div>            <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>{JSON.stringify(state['mock_user_acks'], null, 2)}</pre>

                  setDiag([]); 

                  const r = await runAuthAndGraphCheck();             <div className="small muted">            <div style={{ fontWeight: 700, marginTop: 8 }}>mock_admin_settings</div>

                  setDiag(r); 

                }}>Run Diagnostics</button>              {runtimeMock ? 'Mock mode' : 'Live mode (Super Admin)'}            <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>{JSON.stringify(state['mock_admin_settings'], null, 2)}</pre>

                <button className="btn ghost" onClick={() => setDiag([])}>Clear</button>

              </div>            </div>            <div style={{ marginTop: 8 }}>

              {diag.length > 0 && (

                <div style={{ marginTop: 8 }}>          </div>              <div style={{ fontWeight: 700 }}>Mock User Groups</div>

                  <ul style={{ paddingLeft: 16 }}>

                    {diag.map((d,i) => (          <hr />              <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>

                      <li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>

                        {d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}                          Current Role: <strong style={{ 

                      </li>

                    ))}          {runtimeMock ? (                  color: rbac.role === 'SuperAdmin' ? '#dc2626' : rbac.role === 'Admin' ? '#d63384' : rbac.role === 'Manager' ? '#fd7e14' : '#198754' 

                  </ul>

                </div>            // Mock mode content                }}>

              )}

            </div>            <div>                  {rbac.role}



            <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>              <div style={{ fontWeight: 700 }}>mock_user_acks</div>                  {rbac.isSuperAdmin && ' ⚡'}

              <button className="btn ghost" onClick={reload}>Refresh</button>

              {runtimeMock && <button className="btn ghost" onClick={clear}>Reset</button>}              <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>                </strong>

            </div>

          </div>                {JSON.stringify(state['mock_user_acks'], null, 2)}                {rbac.isSuperAdmin && <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>}

        </div>

      )}              </pre>                {state['mock_user_groups'] && <span> • Groups: {JSON.stringify(state['mock_user_groups'])}</span>}

    </div>

  );                            </div>

};

              <div style={{ fontWeight: 700, marginTop: 8 }}>mock_admin_settings</div>              <div style={{ display: 'flex', gap: 8, marginTop: 6 }}>

export default DevPanel;
              <pre style={{ fontSize: 12, background: '#fafafa', padding: 8 }}>                <button className="btn" onClick={() => { localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Portal-Admins'])); reload(); try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Admin', mock: true } })); } catch {} }}>Set Admin</button>

                {JSON.stringify(state['mock_admin_settings'], null, 2)}                <button className="btn" onClick={() => { localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Dept-Managers'])); reload(); try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Manager', mock: true } })); } catch {} }}>Set Manager</button>

              </pre>                <button className="btn" onClick={() => { localStorage.setItem('mock_user_groups', JSON.stringify([])); reload(); try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Employee', mock: true } })); } catch {} }}>Set Employee</button>

                              <button className="btn ghost" onClick={() => { localStorage.removeItem('mock_user_groups'); reload(); try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Employee', mock: true } })); } catch {} }}>Clear Groups</button>

              <div style={{ marginTop: 8 }}>              </div>

                <div style={{ fontWeight: 700 }}>Mock User Groups</div>            </div>

                <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>            <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>

                  Current Role: <strong style={{               <button className="btn ghost" onClick={reload}>Refresh</button>

                    color: rbac.role === 'SuperAdmin' ? '#dc2626' : rbac.role === 'Admin' ? '#d63384' : rbac.role === 'Manager' ? '#fd7e14' : '#198754'               <button className="btn ghost" onClick={clear}>Reset</button>

                  }}>            </div>

                    {rbac.role}            <div style={{ marginTop: 12 }}>

                    {rbac.isSuperAdmin && ' ⚡'}              <div style={{ fontWeight: 700 }}>Seed Mock Data</div>

                  </strong>              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>

                  {rbac.isSuperAdmin && <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>}                <button className="btn" onClick={() => {

                  {state['mock_user_groups'] && <span> • Groups: {JSON.stringify(state['mock_user_groups'])}</span>}                  const batches = [

                </div>                    { toba_batchid: '1', toba_name: 'Q4 2025 — Code of Conduct', toba_startdate: '2025-10-01', toba_duedate: '2025-10-31' },

                <div style={{ display: 'flex', gap: 8, marginTop: 6 }}>                    { toba_batchid: '2', toba_name: 'Q3 2025 — Health & Safety', toba_startdate: '2025-07-01', toba_duedate: '2025-07-31' }

                  <button className="btn" onClick={() => {                   ];

                    localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Portal-Admins']));                   const docs = {

                    reload();                     '1': [

                    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Admin', mock: true } })); } catch {}                       { toba_documentid: 'd1', toba_title: 'Code of Conduct', toba_version: 'v1.0' },

                  }}>Set Admin</button>                      { toba_documentid: 'd2', toba_title: 'Anti-Bribery Policy', toba_version: 'v1.1' }

                  <button className="btn" onClick={() => {                     ],

                    localStorage.setItem('mock_user_groups', JSON.stringify(['Sunbeth-Dept-Managers']));                     '2': [

                    reload();                       { toba_documentid: 'd3', toba_title: 'Health & Safety Guide', toba_version: 'v2.0' }

                    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Manager', mock: true } })); } catch {}                     ]

                  }}>Set Manager</button>                  };

                  <button className="btn" onClick={() => {                   const acks = { '1': [] };

                    localStorage.setItem('mock_user_groups', JSON.stringify([]));                   localStorage.setItem('mock_batches', JSON.stringify(batches));

                    reload();                   localStorage.setItem('mock_docs_by_batch', JSON.stringify(docs));

                    try { window.dispatchEvent(new CustomEvent('sunbeth:roleChange', { detail: { role: 'Employee', mock: true } })); } catch {}                   localStorage.setItem('mock_user_acks', JSON.stringify(acks));

                  }}>Set Employee</button>                  reload();

                </div>                  try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}

              </div>                }}>Seed</button>

                <button className="btn ghost" onClick={() => { localStorage.removeItem('mock_batches'); localStorage.removeItem('mock_docs_by_batch'); localStorage.removeItem('mock_user_acks'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Clear Seed</button>

              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>              </div>

                <button className="btn ghost" onClick={reload}>Refresh</button>            </div>

                <button className="btn ghost" onClick={clear}>Reset</button>            <div style={{ marginTop: 12 }}>

              </div>              <div style={{ fontWeight: 700 }}>Landing Variant</div>

              <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>

              <div style={{ marginTop: 12 }}>                Current: <strong>{state['landing_variant'] || 'regular'}</strong> • Controls hero layout on Landing page

                <div style={{ fontWeight: 700 }}>Landing Variant</div>              </div>

                <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>

                  Current: <strong>{state['landing_variant'] || 'regular'}</strong> • Controls hero layout on Landing page                <button className="btn" onClick={() => { localStorage.setItem('landing_variant','regular'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Regular</button>

                </div>                <button className="btn" onClick={() => { localStorage.setItem('landing_variant','compact'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Compact</button>

                <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>                <button className="btn ghost" onClick={() => { localStorage.removeItem('landing_variant'); reload(); try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {} }}>Clear</button>

                  <button className="btn" onClick={() => {               </div>

                    localStorage.setItem('landing_variant','regular');             </div>

                    reload();             <div style={{ marginTop: 12 }}>

                    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}               <div style={{ fontWeight: 700 }}>Diagnostics</div>

                  }}>Regular</button>              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>

                  <button className="btn" onClick={() => {                 <button className="btn" onClick={async () => { setDiag([]); const r = await runAuthAndGraphCheck(); setDiag(r); }}>Run Diagnostics</button>

                    localStorage.setItem('landing_variant','compact');                 <button className="btn ghost" onClick={() => setDiag([])}>Clear</button>

                    reload();               </div>

                    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}               {diag.length > 0 && (

                  }}>Compact</button>                <div style={{ marginTop: 8 }}>

                  <button className="btn ghost" onClick={() => {                   <ul style={{ paddingLeft: 16 }}>

                    localStorage.removeItem('landing_variant');                     {diag.map((d,i) => (<li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>{d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}</li>))}

                    reload();                   </ul>

                    try { window.dispatchEvent(new CustomEvent('mockDataChanged')); } catch {}                 </div>

                  }}>Clear</button>              )}

                </div>            </div>

              </div>          ) : (

            // Live mode - Super Admin content

              <div style={{ marginTop: 12 }}>            <div>

                <div style={{ fontWeight: 700 }}>Diagnostics</div>              <div style={{ marginTop: 8 }}>

                <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>                <div style={{ fontWeight: 700 }}>Super Admin Panel</div>

                  <button className="btn" onClick={async () => {                 <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>

                    setDiag([]);                   Current Role: <strong style={{ color: '#dc2626' }}>

                    const r = await runAuthAndGraphCheck();                     {rbac.role} ⚡

                    setDiag(r);                   </strong>

                  }}>Run Diagnostics</button>                  <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>

                  <button className="btn ghost" onClick={() => setDiag([])}>Clear</button>                </div>

                </div>                <div style={{ marginTop: 8, padding: '8px 12px', background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>

                {diag.length > 0 && (                  <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>

                  <div style={{ marginTop: 8 }}>                  <div style={{ fontSize: 11, color: '#666', marginTop: 2 }}>

                    <ul style={{ paddingLeft: 16 }}>                    Email: oluwatoba.ogunsakin@sunbeth.net<br/>

                      {diag.map((d,i) => (                    Source: Environment Variable (REACT_APP_SUPER_ADMINS)

                        <li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>                  </div>

                          {d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}                </div>

                        </li>              </div>

                      ))}              

                    </ul>              <div style={{ marginTop: 12 }}>

                  </div>                <div style={{ fontWeight: 700 }}>Admin Features Access</div>

                )}                <div style={{ marginTop: 6, fontSize: 12 }}>

              </div>                  <div style={{ color: '#059669' }}>✅ Admin Panel (/admin)</div>

            </div>                  <div style={{ color: '#059669' }}>✅ Microsoft Graph Integration</div>

          ) : (                  <div style={{ color: '#059669' }}>✅ SharePoint Document Access</div>

            // Live mode - Super Admin content                  <div style={{ color: '#059669' }}>✅ Analytics Dashboard</div>

            <div>                  <div style={{ color: '#059669' }}>✅ User & Group Management</div>

              <div style={{ marginTop: 8 }}>                  <div style={{ color: '#059669' }}>✅ Batch Creation</div>

                <div style={{ fontWeight: 700 }}>Super Admin Panel</div>                </div>

                <div style={{ fontSize: 12, color: '#666', marginBottom: 6 }}>              </div>

                  Current Role: <strong style={{ color: '#dc2626' }}>

                    {rbac.role} ⚡              <div style={{ marginTop: 12 }}>

                  </strong>                <div style={{ fontWeight: 700 }}>Live Mode Diagnostics</div>

                  <span style={{ color: '#dc2626', fontWeight: 600 }}> (Environment-Based)</span>                <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>

                </div>                  <button className="btn" onClick={async () => { setDiag([]); const r = await runAuthAndGraphCheck(); setDiag(r); }}>Run Diagnostics</button>

                <div style={{ marginTop: 8, padding: '8px 12px', background: '#fef2f2', border: '1px solid #fecaca', borderRadius: 4 }}>                  <button className="btn ghost" onClick={() => setDiag([])}>Clear</button>

                  <div style={{ fontSize: 12, color: '#dc2626', fontWeight: 600 }}>⚡ Super Admin Access Active</div>                </div>

                  <div style={{ fontSize: 11, color: '#666', marginTop: 2 }}>                {diag.length > 0 && (

                    Email: oluwatoba.ogunsakin@sunbeth.net<br/>                  <div style={{ marginTop: 8 }}>

                    Source: Environment Variable (REACT_APP_SUPER_ADMINS)                    <ul style={{ paddingLeft: 16 }}>

                  </div>                      {diag.map((d,i) => (<li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>{d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}</li>))}

                </div>                    </ul>

              </div>                  </div>

                              )}

              <div style={{ marginTop: 12 }}>              </div>

                <div style={{ fontWeight: 700 }}>Admin Features Access</div>

                <div style={{ marginTop: 6, fontSize: 12 }}>              <div style={{ marginTop: 12 }}>

                  <div style={{ color: '#059669' }}>✅ Admin Panel (/admin)</div>                <div style={{ fontWeight: 700 }}>Environment Configuration</div>

                  <div style={{ color: '#059669' }}>✅ Microsoft Graph Integration</div>                <div style={{ marginTop: 6, fontSize: 11, color: '#666' }}>

                  <div style={{ color: '#059669' }}>✅ SharePoint Document Access</div>                  <div>Mock Mode: {process.env.REACT_APP_USE_MOCK}</div>

                  <div style={{ color: '#059669' }}>✅ Analytics Dashboard</div>                  <div>Client ID: {process.env.REACT_APP_CLIENT_ID?.substring(0, 8)}...</div>

                  <div style={{ color: '#059669' }}>✅ User & Group Management</div>                  <div>Tenant ID: {process.env.REACT_APP_TENANT_ID?.substring(0, 8)}...</div>

                  <div style={{ color: '#059669' }}>✅ Batch Creation</div>                </div>

                </div>              </div>

              </div>            </div>

          )}

              <div style={{ marginTop: 12 }}>        </div>

                <div style={{ fontWeight: 700 }}>Live Mode Diagnostics</div>      )}

                <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>    </div>

                  <button className="btn" onClick={async () => {   );

                    setDiag([]); };

                    const r = await runAuthAndGraphCheck(); 

                    setDiag(r); export default DevPanel;

                  }}>Run Diagnostics</button>
                  <button className="btn ghost" onClick={() => setDiag([])}>Clear</button>
                </div>
                {diag.length > 0 && (
                  <div style={{ marginTop: 8 }}>
                    <ul style={{ paddingLeft: 16 }}>
                      {diag.map((d,i) => (
                        <li key={i} style={{ color: d.ok ? 'green' : 'crimson' }}>
                          {d.name}: {d.ok ? 'OK' : 'FAIL'} {d.detail ? ` — ${d.detail}` : ''}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              <div style={{ marginTop: 12 }}>
                <div style={{ fontWeight: 700 }}>Environment Configuration</div>
                <div style={{ marginTop: 6, fontSize: 11, color: '#666' }}>
                  <div>Mock Mode: {process.env.REACT_APP_USE_MOCK}</div>
                  <div>Client ID: {process.env.REACT_APP_CLIENT_ID?.substring(0, 8)}...</div>
                  <div>Tenant ID: {process.env.REACT_APP_TENANT_ID?.substring(0, 8)}...</div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default DevPanel;